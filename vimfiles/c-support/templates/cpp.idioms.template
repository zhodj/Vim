== Idioms.function == map:if, shortcut:f, insert ==
|?FUNCTION_TYPE| |?FUNCTION_NAME|(|?ARGUMENT_LIST|)
{<CURSOR>
<SPLIT>	return |?RETURN_VALUE|;
}		
== Idioms.function-static == map:isf, shortcut:t, insert ==
static |?FUNCTION_TYPE| |?FUNCTION_NAME|(|?ARGUMENT_LIST|)
{
<SPLIT>	return |?RETURN_VALUE|;
}		
== Idioms.main == map:im, shortcut:m, insert ==
#include <stdio.h>

int main(int argc, char *argv[])
{<CURSOR>
<SPLIT>	return 0;
}
== Idioms.enum == map:ie, shortcut:e, insert ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};
== Idioms.struct == map:is, shortcut:s, insert ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};
== Idioms.union == map:iu, shortcut:u, insert ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};
== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf("<CURSOR>", &);
== Idioms.printf == map:ipr, shortcut:p, insert  ==
printf("<CURSOR>\n");
== Idioms.calloc == map:ica, shortcut:c, insert ==
|?POINTER| = calloc((size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>));
if(|POINTER| == NULL){
	fprintf(stderr, "\ndynamic memory allocation failed\n");
	exit(EXIT_FAILURE);
}

free(|POINTER|);
|POINTER| = NULL;

== Idioms.malloc == map:ima, shortcut:m, insert ==
|?POINTER| = malloc(sizeof(<CURSOR>|?TYPE|));
if(|POINTER| == NULL){
	fprintf(stderr, "\ndynamic memory allocation failed\n");
	exit(EXIT_FAILURE);
}

free(|POINTER|);
|POINTER| = NULL;

== Idioms.realloc == map:ire, shortcut:r, insert ==
|?POINTER| = realloc(|POINTER|, sizeof(<CURSOR>|?TYPE|));
if(|POINTER| == NULL){
	fprintf(stderr, "\ndynamic memory reallocation failed\n");
	exit(EXIT_FAILURE);
}

== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert(<CURSOR><SPLIT>);
== Idioms.open-input-file == map:ii, shortcut:i, insert ==
FILE *|?FILEPOINTER|;		
char *|FILEPOINTER|_file_name = "<CURSOR>";

|FILEPOINTER| = fopen(|FILEPOINTER|_file_name, "r");
if(|FILEPOINTER| == NULL){
	fprintf(stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if(fclose(|FILEPOINTER|) == EOF){
	fprintf(stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}

== Idioms.open-output-file == map:io, shortcut:o, insert ==
FILE *|?FILEPOINTER|;		
char *|FILEPOINTER|_file_name = "<CURSOR>";

|FILEPOINTER| = fopen(|FILEPOINTER|_file_name, "w");
if(|FILEPOINTER| == NULL){
	fprintf(stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if(fclose(|FILEPOINTER|) == EOF){
	fprintf(stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}

== Idioms.fprintf == map:ifsc, shortcut:f, insert  ==
fprintf(|?FILEPOINTER|, "<CURSOR>\n", );
== Idioms.fscanf == map:ifpr, shortcut:f, insert  ==
fscanf(|?FILEPOINTER|, "<CURSOR>", &);

