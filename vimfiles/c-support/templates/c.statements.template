== Statements.do while == map:sd, shortcut:d, insert ==
do{
<SPLIT>}while(|?WHILE_CONDITION|);				
== Statements.for == map:sf, shortcut:o, insert ==
for(<CURSOR>; ;)
ยง
ยง The names INIT, CONDITION, INCREMENT, and 'for block' are used by the main
ยง plugin plugin/c.vim . Please do not change.
ยง
== Statements.for block == map:sfo, shortcut:r, insert ==
|DefaultMacro( 'CONDITION', '{+CONDITION+}' )|
|DefaultMacro( 'INCREMENT', '{+INCREMENT+}' )|
for(|INIT|<CURSOR>; |CONDITION|; |INCREMENT|){
<SPLIT>}
== Statements.range-based for == map:sfr, shortcut:a, insert ==
for(<CURSOR>: |?EXPRESSION|){
<SPLIT>}
== Statements.if == map:si, shortcut:i, insert ==
if(<CURSOR>)
== Statements.if block == map:sif, shortcut:f, insert ==
if(<CURSOR>){
<SPLIT>|?IF_PART|
}
== Statements.if else == map:sie, shortcut:e, insert ==
if(<CURSOR>)
<SPLIT>else
== Statements.if block else == map:sife, shortcut:l, insert ==
if(<CURSOR>){
<SPLIT>|?IF_PART|
}
else{
|?ELSE_PART|
}
== Statements.else block == map:se, shortcut:e, insert ==
else{
<CURSOR><SPLIT>
}
== Statements.while == map:sw, shortcut:w, insert ==
while(<CURSOR>)
== Statements.while block == map:swh, shortcut:h, insert ==
while(<CURSOR>){
<SPLIT>}
== Statements.switch == map:ss, shortcut:s, insert ==
switch(<CURSOR>){
	case |?LABEL_1|:	
		<SPLIT>break;

	case |?LABEL_2|:	
		break;

	case |?LABEL_3|:	
		break;

	default:	
		break;
}		
== Statements.case == map:sc, shortcut:c, insert ==
case <CURSOR>:	
break;

== Statements.block == map:sb, shortcut:b, insert ==
{
<CURSOR><SPLIT>
}
